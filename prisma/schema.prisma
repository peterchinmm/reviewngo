generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI") // uses connection pooling
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  email             String      @unique
  password          String
  userType          UserType
  Forum             Forum[]
  Message           Message[]
  student           Student?
  lecturer          Lecturer?
  admin             Admin?
  profileCompleted  Boolean     @default(false)
}

model Student {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  img           String?
  phoneNo       String      @unique
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @unique @db.ObjectId
  matricNo      String      @unique
  programCode   ProgramCode @relation(references: [id], fields: [programCodeId])
  programCodeId String      @db.ObjectId
  Paper         Paper[]
}

model Lecturer {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  img               String?
  phoneNo           String          @unique
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique @db.ObjectId
  workLoad          Int         @default(8)
  expertise         String[]
  titles            String[]    @default([])
  googleScholarLink String         @unique
  ReviewReport      ReviewReport[]
  Paper             Paper[]
}

model ProgramCode {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  programCode String    @unique
  programName String
  student     Student[]
}

model Admin {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @unique @db.ObjectId
}

model Announcement {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  messages     String
  startDate    DateTime
  endDate      DateTime
}

model Paper {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  submittedBy   Student        @relation(references: [id], fields: [studentId])
  supervisor    Lecturer       @relation(references: [id], fields: [lecturerId])
  title         String
  keywords      String[]
  file          String
  status        Status          @default(PENDING)
  studentId     String         @db.ObjectId
  lecturerId    String         @db.ObjectId
  ReviewReports ReviewReport[]
  submittedOn   DateTime       @default(now())
}

model Forum {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  dateCreated  DateTime     @default(now())
  createdBy    User         @relation(references: [id], fields: [userId])
  messages     Message[]
  userId       String       @db.ObjectId
  status       ForumStatus  @default(OPEN)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sentBy    User     @relation(references: [id], fields: [userId])
  createdOn DateTime @default(now())
  message   String
  forum     Forum    @relation(references: [id], fields: [forumId])
  userId    String   @db.ObjectId
  forumId   String   @db.ObjectId
}

model ReviewReport {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  papers                Paper    @relation(fields: [paperId], references: [id])
  paperId               String   @db.ObjectId
  lecturer              Lecturer @relation(references: [id], fields: [lecturerId])
  titleScore            Score?
  objectiveScore        Score?
  problemStatementScore Score?
  projectScopeScore     Score?
  methodologyScore      Score?
  projectPlanScore      Score?
  remarks               String?
  overallScore          Decision?
  reviewed              Boolean   @default(false)
  lecturerId            String   @db.ObjectId
}

enum Status {
  PENDING
  REVIEWING
  RESUBMISSION
  ACCEPTED
}

enum Score {
  VERY_POOR
  POOR
  FAIR
  GOOD
  EXCELLENT
}

enum Decision {
  RESUBMISSION_REQUIRED
  MAJOR_REVISION
  BORDERLINE_PROPOSAL
  WEAK_ACCEPT
  ACCEPT
}

enum UserType {
  STUDENT
  LECTURER
  ADMIN
}

enum ForumStatus {
  OPEN
  CLOSE
}